model = caret::train(Survived ~ .,
data = train_data,
model = type,
tuneLength = 10,
trControl = mod.style)
stopCluster(cl)
return(model)
}
start.time <- Sys.time()
rf_model <- create_model("rf")
stop.time <- Sys.time()
rf.runtime <- stop.time - start.time
train_data$preds = predict(rf_model, newdata = train_data[ , -4])
test_data$preds = predict(rf_model, newdata = test_data[ , -4])
confusionMatrix(reference = train_data$Survived, data = train_data$preds, positive = "Yes")
confusionMatrix(reference = test_data$Survived, data = test_data$preds, positive = "Yes")
train_data
test_data
?runif
indices = runif(length(Titanic[ , 1]) * 0.7, min = 1, max = length(Titanic[ , 1]))
indices
indices = round(runif(length(Titanic[ , 1]) * 0.7, min = 1, max = length(Titanic[ , 1])))
indices
#train_indices = sample.int(length(Titanic[ , 1]) * 0.7, replace = TRUE)
train_indices = round(runif(length(Titanic[ , 1]) * 0.7, min = 1, max = length(Titanic[ , 1])))
train_data = Titanic[train_indices, ]
test_data = Titanic[-train_indices, ]
create_model <- function(type) {
mod.style <- trainControl(method = "repeatedcv",
number = 5,
repeats = 3)
cl <- makePSOCKcluster(4)
registerDoParallel(cl)
model = caret::train(Survived ~ .,
data = train_data,
model = type,
tuneLength = 10,
trControl = mod.style)
stopCluster(cl)
return(model)
}
start.time <- Sys.time()
rf_model <- create_model("rf")
stop.time <- Sys.time()
rf.runtime <- stop.time - start.time
train_data$preds = predict(rf_model, newdata = train_data[ , -4])
test_data$preds = predict(rf_model, newdata = test_data[ , -4])
confusionMatrix(reference = train_data$Survived, data = train_data$preds, positive = "Yes")
confusionMatrix(reference = test_data$Survived, data = test_data$preds, positive = "Yes")
train_data
test_data
indices
sum(which(train_data$Survived == "Yes"))
train_data$Survived == "Yes"
sum(train_data$Survived == "Yes")
sum(test_data$Survived == "Yes")
14/.7
7/.3
confusionMatrix(reference = test_data$Survived, data = test_data$preds, positive = "Yes")
library("Tidyverse")
library("wine")
library("tidyverse")
install.packages("wine")
data(wine)
library("wine")
data(wine)
install.packages("wine")
install.packages("wine")
library("tidyverse")
library("wine")
install.packages("wine")
install.packages("HDclassif")
data(wine)
library("HDclassif")
data(wine)
data(wine)
str(wine)
?pca
library("tidyverse")
library("HDclassif")
data(wine)
pca = prcomp(wine, center = T, scale = T)
print(pca)
plot(pca)
library("factoextra")
fviz_pca_var(wine)
fviz_pca_var(pca)
fviz_pca_ind(pca)
fviz_pca_biplot(pca)
qplot(c(1:4), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
var_explained = pca$sdev^2 / sum(pca$sdev^2)
qplot(c(1:4), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
fviz_eig(pca)
fviz_pca_var(pca)
fviz_eig(pca)
str(pca)
pca
fviz_pca_ind(pca)
str(wine)
unique(wine$class)
colnames(wine) <- c("Cvs", "Alcohol", "Malic_Acid", "Ash", "Alkalinity_of_Ash", "Magnesium", "Total_Phenols", "Flavanoids", "NonFlavanoid_Phenols", "Proanthocyanins", "Color_Intensity", "Hue", "OD280/OD315_of_Diluted_Wine", "Proline")
pca = prcomp(wine, center = T, scale = T)
fviz_pca_var(pca)
fviz_eig(pca)  # nearly 60% of variance explained by first 2 axes
fviz_pca_ind(pca)
str(wine)
heatmap(wine)
heatmap(cor(wine))
wine$Cvs = as.factor(wine$Cvs)
str(wine)
summary(pca)
fviz_pca_ind(pca)
a = fviz_pca_ind(pca)
a
print(a)
str(a)
str(pca)
str(pca$x)
pca_df = cbind(pca$x[ , 1], pca$x[ , 2], wine[ , ])
str(pca_df)
ggplot(pca_df, aes(pca$x[, 1], pca$x[, 2])) +
geom_point()
ggplot(pca_df, aes(pca$x[, 1], pca$x[, 2], color = Cvs)) +
geom_point()
# Visualizing in ggplot
pca_df = cbind(dim1 = pca$x[ , 1], dim1 = pca$x[ , 2], wine[ , ])
# Visualizing in ggplot
pca_df = cbind(dim1 = pca$x[ , 1], dim2 = pca$x[ , 2], wine[ , ])
str(pca_df)
ggplot(pca_df, aes(x = dim1, y = dim2, color = Cvs)) +
geom_point()
library("caret")
# KNN model
num_obs = length(wine[ , 1])
train_indices = sample.int(num_obs * 0.7, replace = TRUE)
train_data = wine[train_indices, ]
test_data = wine[-train_indices, ]
train_scaled = preProcess(x = train_data, method = c("center", "scale"))
test_scaled = preProcess(x = test_data, method = c("center", "scale"))
?trainControl
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
knnFit <- train(Csv ~ ., data = train_scaled, method = "knn", trControl = ctrl, tuneLength = 10)
knnFit <- train(Csv ~ ., data = data.frame(train_scaled), method = "knn", trControl = ctrl, tuneLength = 10)
knnFit <- train(Csv ~ ., data = train_data, method = "knn", preProcess = c("center", "scale"), trControl = ctrl, tuneLength = 10)
str(train_data)
str(train_scaled)
View(train_scaled)
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
knnFit <- train(Csv ~ ., data = train_data, method = "knn", preProcess = c("center", "scale"), trControl = ctrl, tuneLength = 10)
knnFit <- train(Csv ~ ., data = train_data, method = "knn", preProcess = c("center", "scale"), trControl = ctrl, tuneLength = 10)
library("ISLR")
knnFit <- train(Csv ~ ., data = train_data, method = "knn", preProcess = c("center", "scale"), trControl = ctrl, tuneLength = 10)
knnFit <- train(Csv ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10) # preProcess = c("center", "scale"),
str(train_data)
?train
knnFit <- train(form = Csv ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10) # preProcess = c("center", "scale"),
unique(train_data$Csv)
unique(train_data$Cvs)
# KNN model
num_obs = length(wine[ , 1])
train_indices = sample.int(num_obs * 0.7, replace = TRUE)
train_data = wine[train_indices, ]
test_data = wine[-train_indices, ]
unique(train_data$Cvs)
train_indices
unique(test_data$Cvs)
sum(which(wine$Cvs == 3))
wine$Cvs
which(wine$Cvs == 3)
count(which(wine$Cvs == 3))
length(which(wine$Cvs == 3))
length(wine[ , 1])
178*.7
178-124
test_data
train_data
# KNN model
num_obs = length(wine[ , 1])
train_indices = sample.int(num_obs * 0.7, replace = F)
train_data = wine[train_indices, ]
test_data = wine[-train_indices, ]
train_scaled = preProcess(x = train_data, method = c("center", "scale"))
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
knnFit <- train(form = Csv ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10) # preProcess = c("center", "scale"),
unique(train_data$Cvs)
unique(test_data$Cvs)
train_indices
a = train_indices
train_indices = sample.int(num_obs * 0.7, replace = F)
train_indices
train_indices = sample.int(num_obs * 0.7, replace = F)
train_data = wine[train_indices, ]
unique(train_data$Cvs)
train_indices = sample.int(num_obs * 0.7, replace = F)
train_indices = sample.int(num_obs * 0.7, replace = F)
train_indices = sample.int(num_obs * 0.7, replace = F)
train_indicies
train_indices
train_indices = sample.int(num_obs * 0.7, replace = F)
train_data = wine[train_indices, ]
test_data = wine[-train_indices, ]
unique(train_data$Cvs)
max(train_indices)
?sample.int
train_indices = sample.int(num_obs, size = num_obs * 0.7, replace = F)
train_data = wine[train_indices, ]
test_data = wine[-train_indices, ]
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
knnFit <- train(form = Csv ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10) # preProcess = c("center", "scale"),
unique(train_data$Cvs)
unique(test_data$Cvs)
sum(is.na(train_data))
#
train_scaled = preProcess(x = train_data, method = c("center", "scale"))
ctrl <- trainControl(method = "repeatedcv", repeats = 3)
knnFit <- train(form = Csv ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10) # preProcess = c("center", "scale"),
?trainControl
ctrl <- trainControl(method = "repeatedcv", repeats = 3, number = 5, classProbs = T)
knnFit <- train(form = Csv ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10) # preProcess = c("center", "scale"),
head(train_data$Cvs)
head(train_data)
knnFit <- train(form = Cvs ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10) # preProcess = c("center", "scale"),
?make.names
wine$Cvs = factor(wine$Cvs, levels = c("C1", "C2", "C3"))
pca = prcomp(wine, center = T, scale = T)
fviz_pca_var(pca)
fviz_eig(pca)  # nearly 60% of variance explained by first 2 axes
fviz_pca_ind(pca)
heatmap(cor(wine))
# Visualizing in ggplot
pca_df = cbind(dim1 = pca$x[ , 1], dim2 = pca$x[ , 2], wine[ , ])
ggplot(pca_df, aes(x = dim1, y = dim2, color = Cvs)) +
geom_point()
head(pca_df)
wine
data(wine)
colnames(wine) <- c("Cvs", "Alcohol", "Malic_Acid", "Ash", "Alkalinity_of_Ash", "Magnesium", "Total_Phenols", "Flavanoids", "NonFlavanoid_Phenols", "Proanthocyanins", "Color_Intensity", "Hue", "OD280/OD315_of_Diluted_Wine", "Proline")
wine$Cvs = factor(wine$Cvs, labels = c("C1", "C2", "C3"))
pca = prcomp(wine, center = T, scale = T)
fviz_pca_var(pca)
fviz_eig(pca)  # nearly 60% of variance explained by first 2 axes
fviz_pca_ind(pca)
heatmap(cor(wine))
# Visualizing in ggplot
pca_df = cbind(dim1 = pca$x[ , 1], dim2 = pca$x[ , 2], wine[ , ])
ggplot(pca_df, aes(x = dim1, y = dim2, color = Cvs)) +
geom_point()
# KNN model
num_obs = length(wine[ , 1])
train_indices = sample.int(num_obs, size = num_obs * 0.7, replace = F)
train_data = wine[train_indices, ]
test_data = wine[-train_indices, ]
#
train_scaled = preProcess(x = train_data, method = c("center", "scale"))
ctrl <- trainControl(method = "repeatedcv", repeats = 3, number = 5, classProbs = T)
knnFit <- train(form = Cvs ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10) # preProcess = c("center", "scale"),
knnFit <- train(form = Cvs ~ ., data = train_scaled, method = "knn", trControl = ctrl, tuneLength = 10) # preProcess = c("center", "scale"),
data
knnFit <- train(form = Cvs ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10) # preProcess = c("center", "scale"),
unregister_dopar <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
unregister_dopar()
knnFit <- train(form = Cvs ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10) # preProcess = c("center", "scale"),
knnFit <- train(form = Cvs ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10, preProcess = c("center", "scale")) #
train_data$preds = predict(knnFit, newdata = train_data[ , -Cvs])
str(train_data)
train_data$preds = predict(knnFit, newdata = train_data[ , -"Cvs"])
train_data$preds = predict(knnFit, newdata = train_data[ , -1])
test_data$preds = predict(knnFit, newdata = test_data[ , -1])
confusionMatrix(train_data$Cvs, train_data$preds)
confusionMatrix(test_data$Cvs, test_data$preds)
which(train_data$Cvs != train_data$preds)
train_data$mismatched = which(train_data$Cvs != train_data$preds)
train_data$mismatched
train_data$mismatched[which(train_data$Cvs != train_data$preds)] = TRUE
train_data$mismatched[which(train_data$Cvs != train_data$preds)] = TRUE
train_data$mismatched
train_data$mismatched[which(train_data$Cvs == train_data$preds)] = FALSE
train_data$mismatched
test_data$mismatched[which(test_data$Cvs != test_data$preds)] = TRUE
test_data$mismatched[which(test_data$Cvs == test_data$preds)] = FALSE
test_data$mismatched[which(test_data$Cvs != test_data$preds)] = TRUE
test_data$mismatched[which(test_data$Cvs == test_data$preds)] = FALSE
train_data$pca_pred = predict(pca, newdata = train_data)
?melt
?join
?merge
train_data[ , 0]
pca_all = merge(x = pca_df, y = train_data, by.x = 0, all.x = TRUE)
pca_all = merge(x = pca_df, y = train_data, by.x = 0, by.y = mismatched, all.x = TRUE)
train_data$mismatched
pca_all = merge(x = pca_df, y = train_data, by = 0, all.x = TRUE)
View(pca_all)
pca_all = merge(x = pca_all, y = test_data, by = 0, all.x = TRUE)
pca_all = merge(x = pca_df, y = train_data, by = 0, all = TRUE)
View(pca_all)
pca_all = merge(x = pca_all, y = test_data, by = Row.names, all.x = TRUE)
pca_all = merge(x = pca_all, y = test_data, by.x = Row.names, by.y = 0, all.x = TRUE)
head(pca_all)
ggplot(pca_df, aes(x = dim1, y = dim2)) +
geom_point()
ggplot(pca_df, aes(x = dim1, y = dim2, color = Cvs)) +
geom_point()
pca_plot = ggplot(pca_df, aes(x = dim1, y = dim2, color = Cvs)) +
geom_point()
print(pca_plot)
pca_plot$data
test_pca = predict(pca, newdata = test_data)
?predict
test_pca = predict(pca, test_data)
test_pca = predict(pca, test_data[ , ])
?pca
?predict.prcomp
typeof(pca)
test_pca = scale(test_data, pca$center, pca$scale) %*% pca$rotation
pca$center
length(test_data)
length(wine)
str(test_data)
View(test_data)
test_pca = scale(test_data[ , -c(15, 16)], pca$center, pca$scale) %*% pca$rotation
test_data
head(test_data)
pca_w_preds = prcomp(rbind(train_data, test_data))
?prcomp
pca_w_preds = prcomp(form = Cvs ~ ., rbind(train_data, test_data))
pca_w_preds = prcomp(formula = Cvs ~ ., data = rbind(train_data, test_data))
pca_w_preds = prcomp(rbind(train_data, test_data), center = T, scale = T)
str(wine)
typeof(wine)
a = rbind(train_data, test_data)
view(a)
str(a)
pca_w_preds = prcomp(rbind(train_data, test_data)[ , -c(15, 16)], center = T, scale = T)
View(rbind(train_data, test_data)[ , -c(15, 16)])
pca_w_preds = prcomp(rbind(train_data, test_data)[ , -c(1, 15, 16)], center = T, scale = T)
a = prcomp(wine)
library("tidyverse")
library("HDclassif")
library("factoextra")
library("caret")
data(wine)
colnames(wine) <- c("Cvs", "Alcohol", "Malic_Acid", "Ash", "Alkalinity_of_Ash", "Magnesium", "Total_Phenols", "Flavanoids", "NonFlavanoid_Phenols", "Proanthocyanins", "Color_Intensity", "Hue", "OD280/OD315_of_Diluted_Wine", "Proline")
wine$Cvs = factor(wine$Cvs, labels = c("C1", "C2", "C3"))
pca = prcomp(wine, center = T, scale = T)
pca = prcomp(wine[ , -1], center = T, scale = T)
fviz_pca_var(pca)
fviz_eig(pca)  # nearly 60% of variance explained by first 2 axes
fviz_pca_ind(pca)
heatmap(cor(wine))
heatmap(cor(wine[ , -1]))
# Visualizing in ggplot
pca_df = cbind(dim1 = pca$x[ , 1], dim2 = pca$x[ , 2], wine[ , ])
pca_plot = ggplot(pca_df, aes(x = dim1, y = dim2, color = Cvs)) +
geom_point()
print(pca_plot)
# KNN model
num_obs = length(wine[ , 1])
train_indices = sample.int(num_obs, size = num_obs * 0.7, replace = F)
train_data = wine[train_indices, ]
test_data = wine[-train_indices, ]
#
train_scaled = preProcess(x = train_data, method = c("center", "scale"))
ctrl <- trainControl(method = "repeatedcv", repeats = 3, number = 5, classProbs = T)
knnFit <- train(form = Cvs ~ ., data = train_data, method = "knn", trControl = ctrl, tuneLength = 10, preProcess = c("center", "scale")) #
train_data$preds = predict(knnFit, newdata = train_data[ , -1])
test_data$preds = predict(knnFit, newdata = test_data[ , -1])
confusionMatrix(train_data$Cvs, train_data$preds)
confusionMatrix(test_data$Cvs, test_data$preds)  # 94% accurate
train_data$mismatched[which(train_data$Cvs != train_data$preds)] = TRUE
train_data$mismatched[which(train_data$Cvs == train_data$preds)] = FALSE
test_data$mismatched[which(test_data$Cvs != test_data$preds)] = TRUE
train_data$preds = predict(knnFit, newdata = train_data[ , -1])
test_data$preds = predict(knnFit, newdata = test_data[ , -1])
confusionMatrix(train_data$Cvs, train_data$preds)
confusionMatrix(test_data$Cvs, test_data$preds)  # 94% accurate
train_data$mismatched[which(train_data$Cvs != train_data$preds)] = TRUE
train_data$mismatched[which(train_data$Cvs == train_data$preds)] = FALSE
test_data$mismatched[which(test_data$Cvs != test_data$preds)] = TRUE
length(test[ , 1])
length(test_data[ , 1])
test_data$mismatched[which(test_data$Cvs != test_data$preds)]
which(test_data$Cvs != test_data$preds)
test_data$mismatched[which(test_data$Cvs != test_data$preds)] = TRUE
test_data$mismatched[which(test_data$Cvs == test_data$preds)] = FALSE
test_data$mismatched
length(test_data$mismatched)
test_data$mismatched[which(test_data$Cvs != test_data$preds)] = TRUE
test_data$mismatched[which(test_data$Cvs == test_data$preds)] = FALSE
pca_w_preds = prcomp(rbind(train_data, test_data)[ , -c(1, 15, 16)], center = T, scale = T)
a = prcomp(wine)
ggplot(pca_df, aes(x = dim1, y = dim2, color = Cvs)) +
geom_point() +
geom_point(train_data, aes(x = ))
ggplot(pca_w_preds, aes(x = dim1, y = dim2, color = Cvs)) +
geom_point()
pca_w_preds
str(test_data)
pca_w_preds = predict(pca, newdata = test_data[ , -c(1, 15, 16)]
)
pca_w_preds
pca_test = predict(pca, newdata = test_data[ , -c(1, 15, 16)])
pca_test_df = cbind(dim1 = pca_test$x[ , 1], dim2 = pca_test$x[ , 2], test_data[ , ])
ggplot(pca_test_df, aes(x = dim1, y = dim2, color = Cvs)) +
geom_point()
pca_test_df = cbind(dim1 = pca_test$x[ , 1], dim2 = pca_test$x[ , 2], test_data[ , ])
pca_test
pca_test_df = cbind(dim1 = pca_test$PC1, dim2 = pca_test$PC2, test_data[ , ])
pca_test[ , 1]
pca_test[1, ]
pca_test["PC1"]
pca_test[PC1]
pca_test_df = cbind(dim1 = pca_test[ , 1], dim2 = pca_test[ , 2], test_data[ , ])
ggplot(pca_test_df, aes(x = dim1, y = dim2, color = Cvs)) +
geom_point()
ggplot(pca_test_df, aes(x = dim1, y = dim2, color = mismatched)) +
geom_point()
ggplot(pca_test_df, aes(x = dim1, y = dim2, color = mismatched)) +
geom_point() +
scale_shape_manual(values = c(1, 2, 3))
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point() +
scale_shape_manual(shape = c(1, 2))
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point() +
scale_shape_manual(value = c(1, 2))
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point() +
scale_shape_manual(values = c(1, 2))
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs, fill = Cvs)) +
geom_point() +
scale_shape_manual(values = c(1, 2))
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs, fill = Cvs)) +
geom_point() +
scale_shape_manual(values = c(16, 17))
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point(size = 3) +
scale_shape_manual(values = c(16, 17))
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point(size = 2) +
scale_shape_manual(values = c(16, 17))
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point(size = 2.5) +
scale_shape_manual(values = c(16, 17)) +
xlab("Dimension 1 (38% of variance)") +
ylab("Dimension 2 (16% of variance)") +
ggtitle("Test Values and Predictions")
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point(size = 3) +
scale_shape_manual(values = c(16, 17)) +
xlab("Dimension 1 (38% of variance)") +
ylab("Dimension 2 (16% of variance)") +
ggtitle("Test Values and Predictions")
fviz_eig(pca)  # nearly 60% of variance explained by first 2 axes
summary(pca)
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point(size = 3) +
scale_shape_manual(values = c(16, 17)) +
xlab("Dimension 1 (36.2% of variance)") +
ylab("Dimension 2 (19.2% of variance)") +
ggtitle("Test Values and Predictions")
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point(size = 3) +
scale_shape_manual(values = c(16, 17)) +
xlab("Dimension 1 (36.2% of variance)") +
ylab("Dimension 2 (19.2% of variance)") +
ggtitle("Test Values and Predictions") +
theme_classic()
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point(size = 3) +
scale_shape_manual(values = c(16, 17)) +
xlab("Dimension 1 (36.2% of variance)") +
ylab("Dimension 2 (19.2% of variance)") +
ggtitle("Test Values and Predictions") +
theme_bw()
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point(size = 3) +
scale_shape_manual(values = c(16, 17)) +
xlab("Dimension 1 (36.2% of variance)") +
ylab("Dimension 2 (19.2% of variance)") +
ggtitle("Test Values and Predictions") +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5))
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point(size = 3) +
scale_shape_manual(values = c(16, 17)) +
xlab("Dimension 1 (36.2% of variance)") +
ylab("Dimension 2 (19.2% of variance)") +
ggtitle("Test Values and Predictions") +
theme_bw() +
labs(shape = "Incorrect Prediction", color = "CVS")
ggplot(pca_test_df, aes(x = dim1, y = dim2, shape = mismatched, color = Cvs)) +
geom_point(size = 3) +
scale_shape_manual(values = c(16, 17)) +
xlab("Dimension 1 (36.2% of variance)") +
ylab("Dimension 2 (19.2% of variance)") +
ggtitle("Test Values and Predictions") +
theme_bw() +
labs(shape = "Incorrect Prediction", color = "CVS") +
theme(plot.title = element_text(hjust = 0.5))
